import os
import yaml

def parse_or_reformat_yml(file_path):
    """Try to parse the YAML file or reformat it if it's plain text."""
    try:
        # Attempt to parse the file as YAML
        with open(file_path, "r") as f:
            return yaml.safe_load(f)
    except yaml.YAMLError:
        # If parsing fails, assume it's plain text and reformat
        try:
            with open(file_path, "r") as f:
                content = f.read()
            # Wrap plain text in a YAML structure
            return {
                "title": os.path.basename(file_path).replace(".yml", "").replace("-", " ").title(),
                "lyrics": content.strip()
            }
        except Exception as e:
            # If even this fails, raise an exception to handle upstream
            raise Exception(f"Reformatting failed for {file_path}: {e}")

def consolidate_songs():
    """Walk through folders and consolidate song data."""
    songs = {}
    error_log = []  # To track files that cannot be parsed or reformatted

    for root, dirs, files in os.walk("."):
        if os.path.basename(root) == ".":
            continue  # Skip the root directory
        for file in files:
            if file.endswith(".yml"):
                file_path = os.path.join(root, file)
                try:
                    song_data = parse_or_reformat_yml(file_path)
                    if song_data:
                        folder_name = os.path.basename(root)
                        songs[folder_name] = song_data
                except Exception as e:
                    # Log the error and skip the file
                    error_log.append(f"Error processing {file_path}: {e}")
    
    # Write the consolidated YAML file
    with open("consolidated_songs.yml", "w") as f:
        yaml.dump({"songs": songs}, f, default_flow_style=False)
    
    # Write the error log
    if error_log:
        with open("error_log.txt", "w") as f:
            f.write("\n".join(error_log))

if __name__ == "__main__":
    consolidate_songs()
